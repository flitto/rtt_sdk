// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.21 clang-1700.0.13.3)
// swift-module-flags: -target x86_64-apple-xros1.3-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name LiveTranslationSDK_iOS
// swift-module-flags-ignorable:  -interface-compiler-version 6.1
import AVFoundation
import Foundation
@_exported import LiveTranslationSDK_iOS
import NaturalLanguage
import OSLog
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension LiveTranslationSDK_iOS.RealTimeEntity {
  public enum Translation : Swift.Equatable {
    public static func == (a: LiveTranslationSDK_iOS.RealTimeEntity.Translation, b: LiveTranslationSDK_iOS.RealTimeEntity.Translation) -> Swift.Bool
  }
}
extension LiveTranslationSDK_iOS.RealTimeEntity.Translation {
  public struct Request : Swift.Equatable, Swift.Codable, Swift.Sendable {
    public let taskType: Swift.String
    public let data: [LiveTranslationSDK_iOS.RealTimeEntity.Translation.Request.ContentData]
    public init(data: [LiveTranslationSDK_iOS.RealTimeEntity.Translation.Request.ContentData])
    public static func == (a: LiveTranslationSDK_iOS.RealTimeEntity.Translation.Request, b: LiveTranslationSDK_iOS.RealTimeEntity.Translation.Request) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension LiveTranslationSDK_iOS.RealTimeEntity.Translation.Request {
  public struct ContentData : Swift.Equatable, Swift.Codable, Swift.Sendable {
    public init(chatRoomID: Swift.String, chatID: Swift.String, srcLangCode: Swift.String, dstLangCode: Swift.String, timestamp: Swift.Int, text: Swift.String)
    public let chatRoomID: Swift.String
    public let chatID: Swift.String
    public let srcLangCode: Swift.String
    public let dstLangCode: Swift.String
    public let timestamp: Swift.Int
    public let text: Swift.String
    public static func == (a: LiveTranslationSDK_iOS.RealTimeEntity.Translation.Request.ContentData, b: LiveTranslationSDK_iOS.RealTimeEntity.Translation.Request.ContentData) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension LiveTranslationSDK_iOS.RealTimeEntity.Translation {
  public struct Response : Swift.Codable, Swift.Equatable, Swift.Sendable {
    public let metaData: LiveTranslationSDK_iOS.RealTimeEntity.MetaData
    public let contentData: LiveTranslationSDK_iOS.RealTimeEntity.Translation.ContentData
    public static func == (a: LiveTranslationSDK_iOS.RealTimeEntity.Translation.Response, b: LiveTranslationSDK_iOS.RealTimeEntity.Translation.Response) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct ContentData : Swift.Codable, Swift.Equatable, Swift.Sendable {
    public let chatList: [LiveTranslationSDK_iOS.TranslationEntity.TR.Response]
    public var listType: LiveTranslationSDK_iOS.RealTimeEntity.ListType? {
      get
    }
    public static func == (a: LiveTranslationSDK_iOS.RealTimeEntity.Translation.ContentData, b: LiveTranslationSDK_iOS.RealTimeEntity.Translation.ContentData) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension LiveTranslationSDK_iOS.RealTimeEntity {
  public enum Chat : Swift.Equatable {
    public static func == (a: LiveTranslationSDK_iOS.RealTimeEntity.Chat, b: LiveTranslationSDK_iOS.RealTimeEntity.Chat) -> Swift.Bool
  }
}
extension LiveTranslationSDK_iOS.RealTimeEntity.Chat {
  public struct Request : Swift.Equatable, Swift.Codable, Swift.Sendable {
    public let taskType: Swift.String
    public let data: LiveTranslationSDK_iOS.RealTimeEntity.Chat.Request.ContentData
    public init(taskType: Swift.String, data: LiveTranslationSDK_iOS.RealTimeEntity.Chat.Request.ContentData)
    public static func == (a: LiveTranslationSDK_iOS.RealTimeEntity.Chat.Request, b: LiveTranslationSDK_iOS.RealTimeEntity.Chat.Request) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension LiveTranslationSDK_iOS.RealTimeEntity.Chat.Request {
  public struct ContentData : Swift.Equatable, Swift.Codable, Swift.Sendable {
    public init(chatRoomID: Swift.String, chatID: Swift.String, interactionKey: Swift.String, username: Swift.String, srcLangCode: Swift.String, timestamp: Swift.Int, text: Swift.String, duration: Swift.Double, textForTR: Swift.String?)
    public let chatRoomID: Swift.String
    public let chatID: Swift.String
    public let interactionKey: Swift.String
    public let username: Swift.String
    public let srcLangCode: Swift.String
    public let timestamp: Swift.Int
    public let text: Swift.String
    public let duration: Swift.Double
    public let textForTR: Swift.String?
    public static func == (a: LiveTranslationSDK_iOS.RealTimeEntity.Chat.Request.ContentData, b: LiveTranslationSDK_iOS.RealTimeEntity.Chat.Request.ContentData) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension LiveTranslationSDK_iOS.RealTimeEntity.Chat {
  public struct Response : Swift.Codable, Swift.Equatable, Swift.Sendable {
    public let metaData: LiveTranslationSDK_iOS.RealTimeEntity.MetaData
    public let contentData: LiveTranslationSDK_iOS.ChatRoomEntity.List.Response
    public static func == (a: LiveTranslationSDK_iOS.RealTimeEntity.Chat.Response, b: LiveTranslationSDK_iOS.RealTimeEntity.Chat.Response) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension LiveTranslationSDK_iOS.RealTimeEntity {
  public enum ListType : Swift.String, Swift.Equatable, Swift.Codable, Swift.Sendable {
    case renew
    case append
    case update
    case realtime
    case tts
    case question
    case newQuestion
    case translation
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
extension LiveTranslationSDK_iOS.TranslationEntity {
  public struct CompositeChatItem : Swift.Equatable, Swift.Identifiable, Swift.Sendable {
    public init(item: LiveTranslationSDK_iOS.ChatRoomEntity.List.Response.Item, trItem: LiveTranslationSDK_iOS.TranslationEntity.TR.Response?, ttsData: Foundation.Data?, dstLangCode: Swift.String)
    public let item: LiveTranslationSDK_iOS.ChatRoomEntity.List.Response.Item
    public let trItem: LiveTranslationSDK_iOS.TranslationEntity.TR.Response?
    public let ttsData: Foundation.Data?
    public let dstLangCode: Swift.String
    public var id: Swift.String {
      get
    }
    public func mutate(trItem: LiveTranslationSDK_iOS.TranslationEntity.TR.Response?) -> LiveTranslationSDK_iOS.TranslationEntity.CompositeChatItem
    public func mutate(ttsData: Foundation.Data?) -> LiveTranslationSDK_iOS.TranslationEntity.CompositeChatItem
    public static func == (a: LiveTranslationSDK_iOS.TranslationEntity.CompositeChatItem, b: LiveTranslationSDK_iOS.TranslationEntity.CompositeChatItem) -> Swift.Bool
    public typealias ID = Swift.String
  }
}
public enum LanguageCodeFunctor {
  public static var deviceCode: Swift.String {
    get
  }
  public static func savedDeviceCode(langCode: Swift.String?)
  public static func getOSDefaultLangCode() -> Swift.String
}
extension LiveTranslationSDK_iOS.RealTimeEntity {
  public enum Question {
  }
}
extension LiveTranslationSDK_iOS.RealTimeEntity.Question {
  public struct Request : Swift.Equatable, Swift.Codable, Swift.Sendable {
    public let taskType: Swift.String
    public let data: LiveTranslationSDK_iOS.RealTimeEntity.Question.RequestData
    public init(data: LiveTranslationSDK_iOS.RealTimeEntity.Question.RequestData)
    public static func == (a: LiveTranslationSDK_iOS.RealTimeEntity.Question.Request, b: LiveTranslationSDK_iOS.RealTimeEntity.Question.Request) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Add : Swift.Equatable, Swift.Codable, Swift.Sendable {
    public let taskType: Swift.String
    public let data: LiveTranslationSDK_iOS.RealTimeEntity.Question.AddQuestionData
    public init(data: LiveTranslationSDK_iOS.RealTimeEntity.Question.AddQuestionData)
    public static func == (a: LiveTranslationSDK_iOS.RealTimeEntity.Question.Add, b: LiveTranslationSDK_iOS.RealTimeEntity.Question.Add) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct RequestData : Swift.Equatable, Swift.Codable, Swift.Sendable {
    public let chatRoomID: Swift.String
    public let dstLangCode: Swift.String
    public init(chatRoomID: Swift.String, dstLangCode: Swift.String)
    public static func == (a: LiveTranslationSDK_iOS.RealTimeEntity.Question.RequestData, b: LiveTranslationSDK_iOS.RealTimeEntity.Question.RequestData) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct AddQuestionData : Swift.Equatable, Swift.Codable, Swift.Sendable {
    public let chatRoomID: Swift.String
    public let srcLangCode: Swift.String
    public let question: Swift.String
    public let nickname: Swift.String?
    public init(chatRoomID: Swift.String, srcLangCode: Swift.String, question: Swift.String, nickname: Swift.String?)
    public static func == (a: LiveTranslationSDK_iOS.RealTimeEntity.Question.AddQuestionData, b: LiveTranslationSDK_iOS.RealTimeEntity.Question.AddQuestionData) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension LiveTranslationSDK_iOS.RealTimeEntity.Question {
  public struct Response : Swift.Equatable, Swift.Codable, Swift.Sendable {
    public let metaData: LiveTranslationSDK_iOS.RealTimeEntity.MetaData
    public let contentData: LiveTranslationSDK_iOS.RealTimeEntity.Question.Response.QuestionData
    public static func == (a: LiveTranslationSDK_iOS.RealTimeEntity.Question.Response, b: LiveTranslationSDK_iOS.RealTimeEntity.Question.Response) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension LiveTranslationSDK_iOS.RealTimeEntity.Question.Response {
  public struct QuestionData : Swift.Equatable, Swift.Codable, Swift.Sendable {
    public let questionList: [LiveTranslationSDK_iOS.RealTimeEntity.Question.Response.Question]
    public var listType: LiveTranslationSDK_iOS.RealTimeEntity.ListType? {
      get
    }
    public static func == (a: LiveTranslationSDK_iOS.RealTimeEntity.Question.Response.QuestionData, b: LiveTranslationSDK_iOS.RealTimeEntity.Question.Response.QuestionData) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Question : Swift.Identifiable, Swift.Equatable, Swift.Codable, Swift.Sendable {
    public var id: Swift.String {
      get
    }
    public let content: Swift.String
    public let srcLangCode: Swift.String
    public let dstLangCode: Swift.String
    public let nickname: Swift.String?
    public let timestamp: Swift.Int
    public static func == (a: LiveTranslationSDK_iOS.RealTimeEntity.Question.Response.Question, b: LiveTranslationSDK_iOS.RealTimeEntity.Question.Response.Question) -> Swift.Bool
    public typealias ID = Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
public enum LanguageFunctor {
}
extension LiveTranslationSDK_iOS.LanguageFunctor {
  public static func isRTL(string: Swift.String) -> Swift.Bool
  public static func isRTL(string: Swift.String) async -> Swift.Bool
  public static func isRTLSupport(langCode: Swift.String) -> Swift.Bool
  public static func isRTLSupport(langCode: Swift.String) async -> Swift.Bool
  public static func getLanguageCode(string: Swift.String) -> Swift.String?
}
public class TTSLanguageCheckFunctor {
  public init()
  @objc deinit
}
extension LiveTranslationSDK_iOS.TTSLanguageCheckFunctor {
  public func isSupportLanguageBySTT(langCode: Swift.String) async -> Swift.Bool
}
extension LiveTranslationSDK_iOS.RealTimeEntity {
  public enum RecordStream : Swift.Equatable {
    case connect
    case disconnect
    case peerClosed
    case response(LiveTranslationSDK_iOS.RealTimeEntity.STT.Response)
    public static func == (a: LiveTranslationSDK_iOS.RealTimeEntity.RecordStream, b: LiveTranslationSDK_iOS.RealTimeEntity.RecordStream) -> Swift.Bool
  }
  public enum ChatStream : Swift.Equatable {
    case connect
    case disconnect
    case peerClosed
    case responseChat(LiveTranslationSDK_iOS.RealTimeEntity.Chat.Response)
    case responseTTS(LiveTranslationSDK_iOS.TTSEntity.TTS.Response)
    case responseQuestion(LiveTranslationSDK_iOS.RealTimeEntity.Question.Response)
    case responseBatchTranslation(LiveTranslationSDK_iOS.RealTimeEntity.Translation.Response)
    public static func == (a: LiveTranslationSDK_iOS.RealTimeEntity.ChatStream, b: LiveTranslationSDK_iOS.RealTimeEntity.ChatStream) -> Swift.Bool
  }
}
extension LiveTranslationSDK_iOS.RealTimeEntity {
  public enum RecordStreamAction : Swift.Equatable, Swift.Sendable {
    case connect
    case draftData(LiveTranslationSDK_iOS.RealTimeEntity.RecordStreamAction.DraftData?)
    public struct DraftData : Swift.Equatable, Swift.Sendable {
      public let preText: Swift.String
      public let bufferList: [Swift.Int16]
      public let rms: Swift.Float
      public init(preText: Swift.String, bufferList: [Swift.Int16], rms: Swift.Float)
      public static func == (a: LiveTranslationSDK_iOS.RealTimeEntity.RecordStreamAction.DraftData, b: LiveTranslationSDK_iOS.RealTimeEntity.RecordStreamAction.DraftData) -> Swift.Bool
    }
    public static func == (a: LiveTranslationSDK_iOS.RealTimeEntity.RecordStreamAction, b: LiveTranslationSDK_iOS.RealTimeEntity.RecordStreamAction) -> Swift.Bool
  }
}
public struct ConfigurationDomain : Swift.Equatable, Swift.Codable, Swift.Sendable {
  public let baseURL: Swift.String
  public let webSocketURL: Swift.String
  public let audioInfo: LiveTranslationSDK_iOS.ConfigurationDomain.AudioInfo
  public init(baseURL: Swift.String, webSocketURL: Swift.String, audioInfo: LiveTranslationSDK_iOS.ConfigurationDomain.AudioInfo = .init())
  public static func == (a: LiveTranslationSDK_iOS.ConfigurationDomain, b: LiveTranslationSDK_iOS.ConfigurationDomain) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension LiveTranslationSDK_iOS.ConfigurationDomain {
  public struct AudioInfo : Swift.Equatable, Swift.Codable, Swift.Sendable {
    public var sampleRate: Swift.Double {
      get
    }
    public let bufferSize: Swift.UInt32
    public init(bufferSize: Swift.UInt32 = 1_024)
    public static func == (a: LiveTranslationSDK_iOS.ConfigurationDomain.AudioInfo, b: LiveTranslationSDK_iOS.ConfigurationDomain.AudioInfo) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension LiveTranslationSDK_iOS.ConfigurationDomain {
  public static var development: LiveTranslationSDK_iOS.ConfigurationDomain {
    get
  }
  public static var production: LiveTranslationSDK_iOS.ConfigurationDomain {
    get
  }
}
extension LiveTranslationSDK_iOS.ChatRoomEntity {
  public enum Make {
  }
}
extension LiveTranslationSDK_iOS.ChatRoomEntity.Make {
  public struct Request : Swift.Codable, Swift.Equatable, Swift.Sendable {
    public init(chatRoomTitle: Swift.String, srcLangCode: Swift.String, langCodeList: [Swift.String]? = .none, password: Swift.String?, useQnA: Swift.Bool)
    public let chatRoomTitle: Swift.String
    public let srcLangCode: Swift.String
    public let langCodeList: [Swift.String]?
    public let password: Swift.String?
    public let useQnA: Swift.String
    public static func == (a: LiveTranslationSDK_iOS.ChatRoomEntity.Make.Request, b: LiveTranslationSDK_iOS.ChatRoomEntity.Make.Request) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Response : Swift.Codable, Swift.Equatable, Swift.Sendable {
    public init(chatRoomID: Swift.String, interactionKey: Swift.String, chatRoomTitle: Swift.String, srcLangCode: Swift.String, hostUserName: Swift.String, webChatRoomURL: Swift.String, langCodeList: [Swift.String]?, useQnA: Swift.Bool, usePassword: Swift.Bool, password: Swift.String?)
    public let chatRoomID: Swift.String
    public let interactionKey: Swift.String
    public let chatRoomTitle: Swift.String
    public let srcLangCode: Swift.String
    public let hostUserName: Swift.String
    public let webChatRoomURL: Swift.String
    public let langCodeList: [Swift.String]?
    public let password: Swift.String?
    public var useQnA: Swift.Bool {
      get
    }
    public var usePassword: Swift.Bool {
      get
    }
    public static func == (a: LiveTranslationSDK_iOS.ChatRoomEntity.Make.Response, b: LiveTranslationSDK_iOS.ChatRoomEntity.Make.Response) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension LiveTranslationSDK_iOS.ChatRoomEntity {
  public enum Delete {
  }
}
extension LiveTranslationSDK_iOS.ChatRoomEntity.Delete {
  public struct Request : Swift.Codable, Swift.Equatable {
    public let interactionKey: Swift.String
    public init(interactionKey: Swift.String)
    public static func == (a: LiveTranslationSDK_iOS.ChatRoomEntity.Delete.Request, b: LiveTranslationSDK_iOS.ChatRoomEntity.Delete.Request) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension LiveTranslationSDK_iOS.ChatRoomEntity {
  public enum DeleteAllContents {
  }
}
extension LiveTranslationSDK_iOS.ChatRoomEntity.DeleteAllContents {
  public struct Request : Swift.Codable {
    public let interactionKey: Swift.String
    public init(interactionKey: Swift.String)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension LiveTranslationSDK_iOS.ChatRoomEntity.DeleteAllContents {
  public struct Response : Swift.Equatable, Swift.Sendable, Swift.Codable {
    public let isDeleted: Swift.Bool
    public let chatRoomInfo: LiveTranslationSDK_iOS.ChatRoomEntity.DeleteAllContents.Response.ChatRoomInfo?
    public static func == (a: LiveTranslationSDK_iOS.ChatRoomEntity.DeleteAllContents.Response, b: LiveTranslationSDK_iOS.ChatRoomEntity.DeleteAllContents.Response) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension LiveTranslationSDK_iOS.ChatRoomEntity.DeleteAllContents.Response {
  public struct ChatRoomInfo : Swift.Equatable, Swift.Sendable, Swift.Codable {
    public let chatRoomID: Swift.String
    public let interactionKey: Swift.String
    public let chatRoomTitle: Swift.String
    public let srcLangCode: Swift.String
    public let hostUserName: Swift.String
    public let webChatRoomURL: Swift.String
    public let langCodeList: [Swift.String]?
    public let updated: Swift.Int
    public let createdTimestamp: Swift.Int
    public static func == (a: LiveTranslationSDK_iOS.ChatRoomEntity.DeleteAllContents.Response.ChatRoomInfo, b: LiveTranslationSDK_iOS.ChatRoomEntity.DeleteAllContents.Response.ChatRoomInfo) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
public enum LanguageEntity {
}
extension LiveTranslationSDK_iOS.ChatRoomEntity {
  public struct CompositeItem : Swift.Equatable, Swift.Codable, Swift.Sendable {
    public let rawItem: LiveTranslationSDK_iOS.ChatRoomEntity.Make.Response
    public let language: LiveTranslationSDK_iOS.LanguageEntity.Response.LanguageItem
    public init(rawItem: LiveTranslationSDK_iOS.ChatRoomEntity.Make.Response, language: LiveTranslationSDK_iOS.LanguageEntity.Response.LanguageItem)
    public static func == (a: LiveTranslationSDK_iOS.ChatRoomEntity.CompositeItem, b: LiveTranslationSDK_iOS.ChatRoomEntity.CompositeItem) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension LiveTranslationSDK_iOS.ChatRoomEntity {
  public enum EditChatRoomTitle {
  }
}
extension LiveTranslationSDK_iOS.ChatRoomEntity.EditChatRoomTitle {
  public struct Request : Swift.Codable {
    public let chatRoomTitle: Swift.String
    public let interactionKey: Swift.String
    public init(chatRoomTitle: Swift.String, interactionKey: Swift.String)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension LiveTranslationSDK_iOS.ChatRoomEntity {
  public enum Edit {
  }
}
extension LiveTranslationSDK_iOS.ChatRoomEntity.Edit {
  public struct Request : Swift.Equatable, Swift.Codable {
    public let chatRoomID: Swift.String
    public let chatID: Swift.String
    public let text: Swift.String
    public let timestamp: Swift.Int
    public init(chatRoomID: Swift.String, chatID: Swift.String, text: Swift.String, timestamp: Swift.Int)
    public static func == (a: LiveTranslationSDK_iOS.ChatRoomEntity.Edit.Request, b: LiveTranslationSDK_iOS.ChatRoomEntity.Edit.Request) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension LiveTranslationSDK_iOS.ChatRoomEntity {
  public enum EditSrcLang {
  }
}
extension LiveTranslationSDK_iOS.ChatRoomEntity.EditSrcLang {
  public struct Request : Swift.Codable {
    public let srcLangCode: Swift.String
    public let interactionKey: Swift.String
    public init(srcLangCode: Swift.String, interactionKey: Swift.String)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension LiveTranslationSDK_iOS.ChatRoomEntity {
  public struct GroupByLangCode : Swift.Equatable, Swift.Identifiable, Swift.Sendable {
    public let langCode: Swift.String
    public let itemList: [LiveTranslationSDK_iOS.ChatRoomEntity.List.Response.Item]
    public var id: Swift.String {
      get
    }
    public init(langCode: Swift.String, itemList: [LiveTranslationSDK_iOS.ChatRoomEntity.List.Response.Item])
    public static func == (a: LiveTranslationSDK_iOS.ChatRoomEntity.GroupByLangCode, b: LiveTranslationSDK_iOS.ChatRoomEntity.GroupByLangCode) -> Swift.Bool
    public typealias ID = Swift.String
  }
}
extension LiveTranslationSDK_iOS.RealTimeEntity {
  public struct MetaData : Swift.Codable, Swift.Equatable, Swift.Hashable, Swift.Sendable {
    public let code: Swift.Int
    public let message: Swift.String
    public let chatRoomID: Swift.String?
    public let isContinue: Swift.Bool?
    public let isCommit: Swift.Bool?
    public static func == (a: LiveTranslationSDK_iOS.RealTimeEntity.MetaData, b: LiveTranslationSDK_iOS.RealTimeEntity.MetaData) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension LiveTranslationSDK_iOS.ChatRoomEntity {
  public enum Join {
  }
}
extension LiveTranslationSDK_iOS.ChatRoomEntity.Join {
  public struct Request : Swift.Codable, Swift.Equatable {
    public let interactionKey: Swift.String
    public let password: Swift.String?
    public init(interactionKey: Swift.String, password: Swift.String? = .none)
    public static func == (a: LiveTranslationSDK_iOS.ChatRoomEntity.Join.Request, b: LiveTranslationSDK_iOS.ChatRoomEntity.Join.Request) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
public enum UserEntity {
}
extension LiveTranslationSDK_iOS.UserEntity {
  public enum ChatRoom {
  }
}
extension LiveTranslationSDK_iOS.UserEntity.ChatRoom {
  public struct Request : Swift.Codable, Swift.Equatable, Swift.Sendable {
    public let afterTimestamp: Swift.Int?
    public init(afterTimestamp: Swift.Int? = .none)
    public static func == (a: LiveTranslationSDK_iOS.UserEntity.ChatRoom.Request, b: LiveTranslationSDK_iOS.UserEntity.ChatRoom.Request) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public enum Response {
    public struct Item : Swift.Codable, Swift.Equatable, Swift.Identifiable, Swift.Sendable {
      public let srcLangCode: Swift.String
      public let interactionKey: Swift.String
      public let chatRoomTitle: Swift.String
      public let createdTimestamp: Swift.Int
      public let chatRoomID: Swift.String
      public let username: Swift.String
      public let webChatRoomURL: Swift.String
      public let langCodeList: [Swift.String]?
      public var id: Swift.String {
        get
      }
      public var useQnA: Swift.Bool {
        get
      }
      public var usePassword: Swift.Bool {
        get
      }
      public static func == (a: LiveTranslationSDK_iOS.UserEntity.ChatRoom.Response.Item, b: LiveTranslationSDK_iOS.UserEntity.ChatRoom.Response.Item) -> Swift.Bool
      public typealias ID = Swift.String
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
  }
}
extension LiveTranslationSDK_iOS.UserEntity {
  public enum UserInfo {
  }
}
extension LiveTranslationSDK_iOS.UserEntity.UserInfo {
  public struct Response : Swift.Codable, Swift.Equatable, Swift.Sendable {
    public let user: LiveTranslationSDK_iOS.UserEntity.UserInfo.User
    public let token: Swift.String
    public static func == (a: LiveTranslationSDK_iOS.UserEntity.UserInfo.Response, b: LiveTranslationSDK_iOS.UserEntity.UserInfo.Response) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct User : Swift.Codable, Swift.Equatable, Swift.Sendable {
    public enum UserType : Swift.String, Swift.Equatable, Swift.Codable {
      case host
      case manager
      case unknown
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public let defaultLangCode: Swift.String
    public let username: Swift.String
    public let langList: [LiveTranslationSDK_iOS.LanguageEntity.Response.LanguageItem]?
    public let STTAPIToken: Swift.String
    public var userType: LiveTranslationSDK_iOS.UserEntity.UserInfo.User.UserType {
      get
    }
    public static func == (a: LiveTranslationSDK_iOS.UserEntity.UserInfo.User, b: LiveTranslationSDK_iOS.UserEntity.UserInfo.User) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
public enum WebSocketAction : Swift.Sendable {
  case connected([Swift.String : Swift.String])
  case disconnected(Swift.String, Foundation.URLSessionWebSocketTask.CloseCode)
  case text(Swift.String)
  case binary(Foundation.Data)
  case error(any Swift.Error)
}
public enum ChatRoomEntity {
}
public enum TranslationEntity {
}
extension LiveTranslationSDK_iOS.LanguageEntity {
  public enum Request {
  }
  public enum Response {
  }
}
extension LiveTranslationSDK_iOS.LanguageEntity.Request {
  public struct TRLanguage : Swift.Equatable {
    public init()
    public static func == (a: LiveTranslationSDK_iOS.LanguageEntity.Request.TRLanguage, b: LiveTranslationSDK_iOS.LanguageEntity.Request.TRLanguage) -> Swift.Bool
  }
}
extension LiveTranslationSDK_iOS.LanguageEntity.Response {
  public struct TRLanguage : Swift.Equatable, Swift.Codable {
    public let resultList: [LiveTranslationSDK_iOS.LanguageEntity.Response.LanguageItem]
    public init(resultList: [LiveTranslationSDK_iOS.LanguageEntity.Response.LanguageItem] = [])
    public static func == (a: LiveTranslationSDK_iOS.LanguageEntity.Response.TRLanguage, b: LiveTranslationSDK_iOS.LanguageEntity.Response.TRLanguage) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct LanguageItem : Swift.Equatable, Swift.Codable, Swift.Identifiable, Swift.Sendable {
    public let langID: Swift.Int
    public let language: Swift.String
    public let langCode: Swift.String
    public let langORG: Swift.String
    public let langLocal: Swift.String
    public var isSupportLangSet: Swift.Bool {
      get
    }
    public var id: Swift.Int {
      get
    }
    public static func == (a: LiveTranslationSDK_iOS.LanguageEntity.Response.LanguageItem, b: LiveTranslationSDK_iOS.LanguageEntity.Response.LanguageItem) -> Swift.Bool
    public typealias ID = Swift.Int
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension LiveTranslationSDK_iOS.RealTimeEntity {
  public enum Message {
  }
}
extension LiveTranslationSDK_iOS.RealTimeEntity.Message {
  public struct Request : Swift.Equatable, Swift.Codable, Swift.Sendable {
    public init(chatRoomID: Swift.String, chatID: Swift.String, interactionKey: Swift.String, srcLangCode: Swift.String, timestamp: Swift.Int, text: Swift.String, duration: Swift.Double, textForTR: Swift.String?)
    public let chatRoomID: Swift.String
    public let chatID: Swift.String
    public let interactionKey: Swift.String
    public let srcLangCode: Swift.String
    public let timestamp: Swift.Int
    public let text: Swift.String
    public let duration: Swift.Double
    public let textForTR: Swift.String?
    public static func == (a: LiveTranslationSDK_iOS.RealTimeEntity.Message.Request, b: LiveTranslationSDK_iOS.RealTimeEntity.Message.Request) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension LiveTranslationSDK_iOS.RealTimeEntity {
  public enum Connection : Swift.Equatable {
    public static func == (a: LiveTranslationSDK_iOS.RealTimeEntity.Connection, b: LiveTranslationSDK_iOS.RealTimeEntity.Connection) -> Swift.Bool
  }
}
extension LiveTranslationSDK_iOS.RealTimeEntity.Connection {
  public struct ChatRequest : Swift.Equatable, Swift.Codable {
    public let interactionKey: Swift.String
    public init(interactionKey: Swift.String)
    public static func == (a: LiveTranslationSDK_iOS.RealTimeEntity.Connection.ChatRequest, b: LiveTranslationSDK_iOS.RealTimeEntity.Connection.ChatRequest) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension LiveTranslationSDK_iOS.ChatRoomEntity {
  public enum EditRoomPassword {
  }
}
extension LiveTranslationSDK_iOS.ChatRoomEntity.EditRoomPassword {
  public struct Request : Swift.Equatable, Swift.Codable, Swift.Sendable {
    public let interactionKey: Swift.String
    public let usePassword: Swift.String
    public let password: Swift.String?
    public init(interactionKey: Swift.String, usePassword: Swift.Bool, password: Swift.String?)
    public static func == (a: LiveTranslationSDK_iOS.ChatRoomEntity.EditRoomPassword.Request, b: LiveTranslationSDK_iOS.ChatRoomEntity.EditRoomPassword.Request) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
public enum RealTimeEntity {
}
public enum CompositeErrorRepository : Swift.Error, Swift.Sendable {
  case invalidTypeCasting
  case timeout
  case networkOffline
  case networkUnauthorized
  case networkUnknown
  case networkRemoteFail(LiveTranslationSDK_iOS.RemoteErrorRepository)
  case openApiRemoteFail(LiveTranslationSDK_iOS.OpenApiErrorRepository)
  case networkNotFound
  case other(any Swift.Error)
  case userCancelled
  case stopSpeech
  case webSocketDisconnect
  public var displayMessage: Swift.String {
    get
  }
}
extension LiveTranslationSDK_iOS.CompositeErrorRepository : Swift.Equatable {
  public var isNetworkUnauthorized: Swift.Bool {
    get
  }
  public var isExpiredCard: Swift.Bool {
    get
  }
  public var isLimitCount: Swift.Bool {
    get
  }
  public var isNoDetectVoice: Swift.Bool {
    get
  }
  public var isNotExist: Swift.Bool {
    get
  }
  public var isNeedChatRoomPassword: Swift.Bool {
    get
  }
  public var isSameTranslationLangCode: Swift.Bool {
    get
  }
  public var isExpiredTrial: Swift.Bool {
    get
  }
  public var isForcedLogoutByAnotherDeviceLogIn: Swift.Bool {
    get
  }
  public var isAlreadyLoggedInAnotherDevice: Swift.Bool {
    get
  }
  public var isNotCorrectAccountOrPW: Swift.Bool {
    get
  }
  public static func == (lhs: LiveTranslationSDK_iOS.CompositeErrorRepository, rhs: LiveTranslationSDK_iOS.CompositeErrorRepository) -> Swift.Bool
}
extension LiveTranslationSDK_iOS.CompositeErrorRepository {
  public struct Folder : Swift.Equatable {
    public var parentsID: Swift.String
    public var folderName: Swift.String
    public var driveID: Swift.String
    public init(parentsID: Swift.String, folderName: Swift.String, driveID: Swift.String)
    public static func == (a: LiveTranslationSDK_iOS.CompositeErrorRepository.Folder, b: LiveTranslationSDK_iOS.CompositeErrorRepository.Folder) -> Swift.Bool
  }
}
extension Swift.Error {
  public func serialized() -> LiveTranslationSDK_iOS.CompositeErrorRepository
}
public enum CompositeError : Swift.Error {
  case offline
  case other(any Swift.Error)
}
extension LiveTranslationSDK_iOS.CompositeError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public struct OpenApiErrorRepository : Swift.Equatable, Swift.Codable, Swift.Sendable {
  public init(meta: LiveTranslationSDK_iOS.OpenApiErrorRepository.Meta)
  public struct Meta : Swift.Equatable, Swift.Codable, Swift.Sendable {
    public let code: Swift.Int?
    public let message: Swift.String?
    public init(code: Swift.Int?, message: Swift.String?)
    public static func == (a: LiveTranslationSDK_iOS.OpenApiErrorRepository.Meta, b: LiveTranslationSDK_iOS.OpenApiErrorRepository.Meta) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public let meta: LiveTranslationSDK_iOS.OpenApiErrorRepository.Meta
  public static func == (a: LiveTranslationSDK_iOS.OpenApiErrorRepository, b: LiveTranslationSDK_iOS.OpenApiErrorRepository) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension LiveTranslationSDK_iOS.LanguageEntity.Request {
  public struct LangSet : Swift.Codable, Swift.Equatable, Swift.Sendable {
    public let langCode: Swift.String
    public init(langCode: Swift.String)
    public static func == (a: LiveTranslationSDK_iOS.LanguageEntity.Request.LangSet, b: LiveTranslationSDK_iOS.LanguageEntity.Request.LangSet) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension LiveTranslationSDK_iOS.LanguageEntity.Response {
  public struct LangSet : Swift.Codable, Swift.Equatable, Swift.Sendable {
    public let ltGstCodeTtl: Swift.String
    public let ltGstCodeStt: Swift.String
    public let ltGstSelLangTtl: Swift.String
    public let ltGstSelLangHelp: Swift.String
    public let ltGstEmailTtl: Swift.String
    public let ltGstEmailOptTtl: Swift.String
    public let ltGstEmailHint: Swift.String
    public let ltGstEmailHelp: Swift.String
    public let ltGstJoinBtn: Swift.String
    public let ltGstChatNewmsgBtn: Swift.String
    public let ltGstChatWaitTxt: Swift.String
    public let ltGstEmailError: Swift.String
    public let ltSpkrLogTtl: Swift.String
    public let ltSpkrLogIdTtl: Swift.String
    public let ltSpkrLogIdHint: Swift.String
    public let ltSpkrLogPwTtl: Swift.String
    public let ltSpkrLogPwHint: Swift.String
    public let ltSpkrLogBtn: Swift.String
    public let ltSpkrLogGuideLink: Swift.String
    public let ltSpkrLogBtmAuthTtl: Swift.String
    public let ltSpkrLogBtmAuthStt: Swift.String
    public let ltSpkrLogBtmTryBtn: Swift.String
    public let ltSpkrListEmptyTtl: Swift.String
    public let ltSpkrListEmptyStt: Swift.String
    public let ltSpkrListCreateBtn: Swift.String
    public let ltSpkrListTtl: Swift.String
    public let ltSpkrListCodeTxt: Swift.String
    public let ltSpkrListNewBtn: Swift.String
    public let ltSpkrNewTtl: Swift.String
    public let ltSpkrNewInfoTtl: Swift.String
    public let ltSpkrNewTtlTtl: Swift.String
    public let ltSpkrNewTtlHint: Swift.String
    public let ltSpkrNewTtlHelp: Swift.String
    public let ltSpkrNewLangTtl: Swift.String
    public let ltSpkrNewLangHelp: Swift.String
    public let ltSpkrNewDoneBtn: Swift.String
    public let ltSpkrSelLangTtl: Swift.String
    public let ltSpkrSelLangSearchHint: Swift.String
    public let ltSpkrChatCodeTxt: Swift.String
    public let ltSpkrChatGuideBanner: Swift.String
    public let ltSpkrChatSttHint: Swift.String
    public let ltSpkrChatMicBtn: Swift.String
    public let ltSpkrChatCutBtn: Swift.String
    public let ltSpkrChatEditCancelBtn: Swift.String
    public let ltSpkrChatEditSaveBtn: Swift.String
    public let ltSpkrChatEditedTxt: Swift.String
    public let ltSpkrChatSettingTtl: Swift.String
    public let ltSpkrChatSettingCodeTtl: Swift.String
    public let ltSpkrAccountTtl: Swift.String
    public let ltSpkrAccountIdTtl: Swift.String
    public let ltSpkrAccountLogoutBtn: Swift.String
    public let ltSpkrQnaTab: Swift.String
    public let ltSpkrContentTab: Swift.String
    public let ltSpkrQnaEmptyTtl: Swift.String
    public let ltSpkrLangTtl: Swift.String
    public let ltConfirmLogoutTtl: Swift.String
    public let ltConfirmDontBtn: Swift.String
    public let ltConfirmDoBtn: Swift.String
    public let ltConfirmLogoutBtn: Swift.String
    public let ltSpkrAccountLangTtl: Swift.String
    public let ltSpkrAccountVerTtl: Swift.String
    public let ltSpkrLogError: Swift.String
    public let ltAccountServerTtl: Swift.String
    public let ltAccountServerNowTxt: Swift.String
    public let ltAccountServerDev: Swift.String
    public let ltAccountServerLive: Swift.String
    public let ltAccountServerChangeTxt: Swift.String
    public let ltSptrListEmptyStt: Swift.String
    public let ltJoinGstBtn: Swift.String?
    public let ltLoginMemberBtn: Swift.String?
    public let ltCSLink: Swift.String?
    public let ltGstNameTtl: Swift.String?
    public let ltGstNameOptTtl: Swift.String?
    public let ltGstQnaNameHint: Swift.String?
    public let ltGstNameHelp: Swift.String?
    public let ltGstSettingTtl: Swift.String?
    public let ltGstFontSizeTtl: Swift.String?
    public let ltGstTtsSpeedTxt: Swift.String?
    public let ltGstShareTxt: Swift.String?
    public let ltGstScanQrTxt: Swift.String?
    public let ltGstShareOrTxt: Swift.String?
    public let ltGstShareUrlTxt: Swift.String?
    public let ltCopyDoneToast: Swift.String?
    public let ltGstQnaInputErrorToast: Swift.String?
    public let ltGstQnaSentToast: Swift.String?
    public let ltGstQnaTxt: Swift.String?
    public let ltGstQnaEmptyStt: Swift.String?
    public let ltGstQnaInputHint: Swift.String?
    public let ltGstCodeError: Swift.String?
    public let ltLoginModalSpkrTtl: Swift.String
    public let ltLoginModalSpkrStt: Swift.String
    public let ltGstChatWaitTtl: Swift.String
    public let ltAlertLoginDupliATtl: Swift.String
    public let ltAlertLoginDupliAStt: Swift.String
    public let ltAlertLoginDupliBTtl: Swift.String
    public let ltAlertLoginDupliBStl: Swift.String
    public let ltAlertTrialExpireTtl: Swift.String
    public let ltAlertTrialExpireStt: Swift.String
    public let ltSpkrSelMonolangBtn: Swift.String
    public let ltSpkrSelMultilangBtn: Swift.String
    public let ltSpkrSelMultilangHelp: Swift.String
    public let ltSpkrSelMultilangError: Swift.String
    public let ltSpkrSelMultilangResetBtn: Swift.String
    public let ltSpkrSelMultilangGuideTxt: Swift.String
    public let ltSpkrSelMultilangDoneBtn: Swift.String
    public let ltSpkrSelLangChangedToast: Swift.String
    public let ltSpkrInfoChangeBtn: Swift.String
    public let ltSpkrInfoDelLogTtl: Swift.String
    public let ltSpkrInfoDelLogStt: Swift.String
    public let ltSpkrInfoDelLogConfirmTtl: Swift.String
    public let ltSpkrInfoDelLogConfirmStt: Swift.String
    public let ltSpkrInfoChangeAlertToast: Swift.String
    public let ltSpkrInfoDelLogToast: Swift.String
    public let ltSpkrInfoTtlSaveBtn: Swift.String
    public let ltSpkrInfoTtlChangedToast: Swift.String
    public let ltConfirmDeletBtn: Swift.String
    public let ltReqAccessTtl: Swift.String
    public let ltReqAccessConfirmTxt: Swift.String
    public let ltAlertPwTtl: Swift.String
    public let ltAlertPwStt: Swift.String
    public let ltAlertPwHintGst: Swift.String
    public let ltAlertPwError: Swift.String
    public let ltAlertPwErrorSub: Swift.String
    public let ltSpkrNewSetTtl: Swift.String
    public let ltSpkrNewSetPwTtl: Swift.String
    public let ltSpkrNewSetPwStt: Swift.String
    public let ltSpkrNewSetQnaTtl: Swift.String
    public let ltSpkrNewSetQnaStt: Swift.String
    public let ltAlertPwHintHost: Swift.String
    public let ltAlertPwErrorHost: Swift.String
    public let ltSpkrtPwChangeBtn: Swift.String
    public let ltSpkrInfoPwTtl: Swift.String
    public let ltGstTtsPlayToast: Swift.String
    public let ltGstTtsStopToast: Swift.String
    public let ltLangAr: Swift.String
    public let ltLangYue: Swift.String
    public let ltLangZhCn: Swift.String
    public let ltLangZhTw: Swift.String
    public let ltLangHr: Swift.String
    public let ltLangCs: Swift.String
    public let ltLangNl: Swift.String
    public let ltLangEn: Swift.String
    public let ltLangFi: Swift.String
    public let ltLangFr: Swift.String
    public let ltLangDe: Swift.String
    public let ltLangEl: Swift.String
    public let ltLangHe: Swift.String
    public let ltLangHi: Swift.String
    public let ltLangHu: Swift.String
    public let ltLangId: Swift.String
    public let ltLangIt: Swift.String
    public let ltLangJa: Swift.String
    public let ltLangKo: Swift.String
    public let ltLangMs: Swift.String
    public let ltLangMn: Swift.String
    public let ltLangFa: Swift.String
    public let ltLangPl: Swift.String
    public let ltLangPt: Swift.String
    public let ltLangPtBr: Swift.String
    public let ltLangRo: Swift.String
    public let ltLangRu: Swift.String
    public let ltLangSk: Swift.String
    public let ltLangEs: Swift.String
    public let ltLangSw: Swift.String
    public let ltLangSv: Swift.String
    public let ltLangTl: Swift.String
    public let ltLangTh: Swift.String
    public let ltLangTr: Swift.String
    public let ltLangUk: Swift.String
    public let ltLangUz: Swift.String
    public let ltLangVi: Swift.String
    public let ltLangNe: Swift.String
    public let ltGstModeTtl: Swift.String
    public static func == (a: LiveTranslationSDK_iOS.LanguageEntity.Response.LangSet, b: LiveTranslationSDK_iOS.LanguageEntity.Response.LangSet) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension LiveTranslationSDK_iOS.LanguageEntity.Response.LangSet {
  public func getLangSet(langSetKey: Swift.String) -> Swift.String?
}
extension LiveTranslationSDK_iOS.LanguageEntity.Response.LangSet {
  public func langCodingKey(_ langCode: Swift.String?) -> Swift.String?
  public func langCodingKey(_ langCode: Swift.String?) async -> Swift.String?
}
extension LiveTranslationSDK_iOS.ChatRoomEntity {
  public enum List {
  }
}
extension LiveTranslationSDK_iOS.ChatRoomEntity.List {
  public struct Request : Swift.Codable, Swift.Equatable, Swift.Sendable {
    public let chatRoomID: Swift.String
    public let interactionKey: Swift.String
    public let updated: Swift.Int?
    public init(chatRoomID: Swift.String, interactionKey: Swift.String, updated: Swift.Int?)
    public static func == (a: LiveTranslationSDK_iOS.ChatRoomEntity.List.Request, b: LiveTranslationSDK_iOS.ChatRoomEntity.List.Request) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Response : Swift.Codable, Swift.Equatable, Swift.Sendable {
    public let chatList: [LiveTranslationSDK_iOS.ChatRoomEntity.List.Response.Item]
    public let updated: Swift.Int?
    public var listType: LiveTranslationSDK_iOS.RealTimeEntity.ListType? {
      get
    }
    public var lastUpdated: Swift.Int? {
      get
    }
    public static func == (a: LiveTranslationSDK_iOS.ChatRoomEntity.List.Response, b: LiveTranslationSDK_iOS.ChatRoomEntity.List.Response) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension LiveTranslationSDK_iOS.ChatRoomEntity.List.Response {
  public struct Item : Swift.Codable, Swift.Equatable, Swift.Identifiable, Swift.Sendable {
    public let interactionKey: Swift.String
    public let timestamp: Swift.Int
    public let text: Swift.String
    public let chatID: Swift.String
    public let srcLangCode: Swift.String
    public let chatRoomID: Swift.String
    public let username: Swift.String
    public let duration: Swift.Double
    public let textForTR: Swift.String
    public var id: Swift.String {
      get
    }
    public var isEditing: Swift.Bool {
      get
    }
    public var isEdit: Swift.Bool {
      get
    }
    public var isWrong: Swift.Bool {
      get
    }
    public static func == (a: LiveTranslationSDK_iOS.ChatRoomEntity.List.Response.Item, b: LiveTranslationSDK_iOS.ChatRoomEntity.List.Response.Item) -> Swift.Bool
    public typealias ID = Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
public struct RemoteErrorRepository : Swift.Equatable, Swift.Codable, Swift.Sendable {
  public init(code: Swift.Int?, message: Swift.String?)
  public let code: Swift.Int?
  public let message: Swift.String?
  public static func == (a: LiveTranslationSDK_iOS.RemoteErrorRepository, b: LiveTranslationSDK_iOS.RemoteErrorRepository) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum TTSEntity {
}
extension LiveTranslationSDK_iOS.TranslationEntity {
  public enum TR : Swift.Equatable {
    public static func == (a: LiveTranslationSDK_iOS.TranslationEntity.TR, b: LiveTranslationSDK_iOS.TranslationEntity.TR) -> Swift.Bool
  }
}
extension LiveTranslationSDK_iOS.TranslationEntity.TR {
  public struct Request : Swift.Equatable, Swift.Codable {
    public init(chatRoomID: Swift.String, chatID: Swift.String, timestamp: Swift.Int, text: Swift.String, srcLangCode: Swift.String, dstLangCode: Swift.String)
    public let chatRoomID: Swift.String
    public let chatID: Swift.String
    public let timestamp: Swift.Int
    public let text: Swift.String
    public let srcLangCode: Swift.String
    public let dstLangCode: Swift.String
    public static func == (a: LiveTranslationSDK_iOS.TranslationEntity.TR.Request, b: LiveTranslationSDK_iOS.TranslationEntity.TR.Request) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Response : Swift.Equatable, Swift.Codable, Swift.Sendable {
    public init(srcLangCode: Swift.String, dstLangCode: Swift.String, content: Swift.String, text: Swift.String, chatRoomID: Swift.String, chatID: Swift.String, timestamp: Swift.Int)
    public let srcLangCode: Swift.String
    public let dstLangCode: Swift.String
    public let content: Swift.String
    public let text: Swift.String
    public let chatRoomID: Swift.String
    public let chatID: Swift.String
    public let timestamp: Swift.Int
    public static func == (a: LiveTranslationSDK_iOS.TranslationEntity.TR.Response, b: LiveTranslationSDK_iOS.TranslationEntity.TR.Response) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
public class LiveTranslationService {
  public init()
  @objc deinit
}
extension LiveTranslationSDK_iOS.LiveTranslationService {
  public func getChatRoomInfo(_ requestModel: LiveTranslationSDK_iOS.ChatRoomEntity.Join.Request) async throws(LiveTranslationSDK_iOS.CompositeErrorRepository) -> LiveTranslationSDK_iOS.ChatRoomEntity.Make.Response
}
extension LiveTranslationSDK_iOS.LiveTranslationService {
  public func getLangSet(_ request: LiveTranslationSDK_iOS.LanguageEntity.Request.LangSet?) async throws(LiveTranslationSDK_iOS.CompositeErrorRepository) -> LiveTranslationSDK_iOS.LanguageEntity.Response.LangSet
  public func getLangList() async throws(LiveTranslationSDK_iOS.CompositeErrorRepository) -> [LiveTranslationSDK_iOS.LanguageEntity.Response.LanguageItem]
}
extension LiveTranslationSDK_iOS.LiveTranslationService {
  public func chatConnection(_ requestItem: LiveTranslationSDK_iOS.RealTimeEntity.Connection.ChatRequest) -> _Concurrency.AsyncThrowingStream<LiveTranslationSDK_iOS.RealTimeEntity.ChatStream, any Swift.Error>
  public func chatDisconnection() async
  public func requestBatchTranslation(_ requestModel: LiveTranslationSDK_iOS.RealTimeEntity.Translation.Request) async
}
extension LiveTranslationSDK_iOS.ChatRoomEntity {
  public enum EditLangCodeList {
  }
}
extension LiveTranslationSDK_iOS.ChatRoomEntity.EditLangCodeList {
  public struct Request : Swift.Codable {
    public let langCodeList: [Swift.String]
    public let interactionKey: Swift.String
    public init(langCodeList: [Swift.String], interactionKey: Swift.String)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension LiveTranslationSDK_iOS.TTSEntity {
  public enum TTS {
  }
}
extension LiveTranslationSDK_iOS.TTSEntity.TTS {
  public struct Request : Swift.Equatable, Swift.Codable, Swift.Sendable {
    public init(data: LiveTranslationSDK_iOS.TTSEntity.TTS.Request.RequestData)
    public struct RequestData : Swift.Equatable, Swift.Codable, Swift.Sendable {
      public init(chatRoomID: Swift.String, chatID: Swift.String, timestamp: Swift.Int, text: Swift.String, langCode: Swift.String)
      public let chatRoomID: Swift.String
      public let chatID: Swift.String
      public let timestamp: Swift.Int
      public let text: Swift.String
      public let langCode: Swift.String
      public static func == (a: LiveTranslationSDK_iOS.TTSEntity.TTS.Request.RequestData, b: LiveTranslationSDK_iOS.TTSEntity.TTS.Request.RequestData) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public let taskType: Swift.String
    public let data: LiveTranslationSDK_iOS.TTSEntity.TTS.Request.RequestData
    public static func == (a: LiveTranslationSDK_iOS.TTSEntity.TTS.Request, b: LiveTranslationSDK_iOS.TTSEntity.TTS.Request) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension LiveTranslationSDK_iOS.TTSEntity.TTS {
  public struct Response : Swift.Equatable, Swift.Codable, Swift.Sendable {
    public let metaData: LiveTranslationSDK_iOS.RealTimeEntity.MetaData
    public let ttsData: LiveTranslationSDK_iOS.TTSEntity.TTS.TTSData
    public static func == (a: LiveTranslationSDK_iOS.TTSEntity.TTS.Response, b: LiveTranslationSDK_iOS.TTSEntity.TTS.Response) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension LiveTranslationSDK_iOS.TTSEntity.TTS {
  public struct TTSData : Swift.Equatable, Swift.Codable, Swift.Sendable {
    public let listType: Swift.String
    public let chatList: [LiveTranslationSDK_iOS.TTSEntity.TTS.TTSItem]
    public static func == (a: LiveTranslationSDK_iOS.TTSEntity.TTS.TTSData, b: LiveTranslationSDK_iOS.TTSEntity.TTS.TTSData) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct TTSItem : Swift.Equatable, Swift.Codable, Swift.Sendable {
    public let ttsURL: Swift.String
    public let langCode: Swift.String
    public let chatRoomID: Swift.String
    public let chatID: Swift.String
    public let text: Swift.String
    public let timestamp: Swift.Int
    public static func == (a: LiveTranslationSDK_iOS.TTSEntity.TTS.TTSItem, b: LiveTranslationSDK_iOS.TTSEntity.TTS.TTSItem) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
public struct RealTimeRepository {
}
extension LiveTranslationSDK_iOS.RealTimeEntity {
  public enum STT : Swift.Equatable {
    public static func == (a: LiveTranslationSDK_iOS.RealTimeEntity.STT, b: LiveTranslationSDK_iOS.RealTimeEntity.STT) -> Swift.Bool
  }
}
extension LiveTranslationSDK_iOS.RealTimeEntity.STT {
  public struct ConnectionRequest : Swift.Equatable, Swift.Codable {
    public init(command: Swift.String, flittoAPIKey: Swift.String, framesFormat: Swift.String, language: Swift.String, sampleRate: Swift.Int, encoding: Swift.String, bitDepth: Swift.Int, includeSmallerModel: Swift.String = "Y", timeSlice: Swift.Int = 100, useRealtimeV2: Swift.String = "Y")
    public let command: Swift.String
    public let flittoAPIKey: Swift.String
    public let framesFormat: Swift.String
    public let language: Swift.String
    public let sampleRate: Swift.Int
    public let encoding: Swift.String
    public let bitDepth: Swift.Int
    public let includeSmallerModel: Swift.String
    public let timeSlice: Swift.Int
    public let useRealtimeV2: Swift.String
    public static func == (a: LiveTranslationSDK_iOS.RealTimeEntity.STT.ConnectionRequest, b: LiveTranslationSDK_iOS.RealTimeEntity.STT.ConnectionRequest) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct STTRequest : Swift.Equatable, Swift.Codable {
    public init(command: Swift.String, transcriptID: Swift.String, buffer: [Swift.Int16]?, timestamp: Swift.Double? = Date.now.timeIntervalSince1970 * 1000, language: Swift.String?)
    public let command: Swift.String
    public let transcriptID: Swift.String
    public let buffer: [Swift.Int16]?
    public let timestamp: Swift.Double?
    public let language: Swift.String?
    public static func == (a: LiveTranslationSDK_iOS.RealTimeEntity.STT.STTRequest, b: LiveTranslationSDK_iOS.RealTimeEntity.STT.STTRequest) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension LiveTranslationSDK_iOS.RealTimeEntity.STT {
  public struct Response : Swift.Equatable, Swift.Codable, Swift.Sendable {
    public let command: Swift.String?
    public let connectionID: Swift.String?
    public let data: LiveTranslationSDK_iOS.RealTimeEntity.STT.ContentData?
    public static func == (a: LiveTranslationSDK_iOS.RealTimeEntity.STT.Response, b: LiveTranslationSDK_iOS.RealTimeEntity.STT.Response) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct ContentData : Swift.Equatable, Swift.Codable, Swift.Sendable {
    public let transcriptID: Swift.String
    public let text: Swift.String?
    public let duration: Swift.Double?
    public let language: Swift.String?
    public let smallerModelText: Swift.String?
    public static func == (a: LiveTranslationSDK_iOS.RealTimeEntity.STT.ContentData, b: LiveTranslationSDK_iOS.RealTimeEntity.STT.ContentData) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
public enum SocketDomain {
}
extension LiveTranslationSDK_iOS.SocketDomain {
  public enum WebSocketMessage : Swift.Equatable {
    case string(Swift.String)
    case data(Foundation.Data)
    public static func == (a: LiveTranslationSDK_iOS.SocketDomain.WebSocketMessage, b: LiveTranslationSDK_iOS.SocketDomain.WebSocketMessage) -> Swift.Bool
  }
  public enum WebSocketAction : Swift.Equatable {
    case connect
    case message(LiveTranslationSDK_iOS.SocketDomain.WebSocketMessage)
    case error(LiveTranslationSDK_iOS.CompositeErrorRepository)
    case cancel
    case disconnect(Swift.String, Swift.UInt16)
    case peerClosed
    public static func == (a: LiveTranslationSDK_iOS.SocketDomain.WebSocketAction, b: LiveTranslationSDK_iOS.SocketDomain.WebSocketAction) -> Swift.Bool
  }
}
extension LiveTranslationSDK_iOS.RealTimeEntity.ListType : Swift.Hashable {}
extension LiveTranslationSDK_iOS.RealTimeEntity.ListType : Swift.RawRepresentable {}
extension LiveTranslationSDK_iOS.UserEntity.UserInfo.User.UserType : Swift.Hashable {}
extension LiveTranslationSDK_iOS.UserEntity.UserInfo.User.UserType : Swift.RawRepresentable {}
